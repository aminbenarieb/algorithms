import random 

def concrete_partition(A, lo, h):
	i = random.randint(lo,h)
	# i = lo
	# i = h
	# i = median_pivot(A, lo, h)
	swap(A, i, lo)
	return partition(A, lo, h)

def partition(A, p, h):
	pivot_value = A[p]
	i = p+1

	for j in xrange(p+1,h+1):
		if A[j] <= pivot_value:
			A[j], A[i] = A[i], A[j] 
			i += 1

	A[p], A[i-1] = A[i-1], A[p]

	return i-1

def rand_select(A, p, r, i):
	if p == r:
		return A[p]

	q = partition(A, p, r)
	k = q - p + 1
	if i == k:
		return A[q]
	elif i < k:
		return rand_select(A, p, q - 1, i)

	return rand_select(A, q + 1, r, i - k)

alist = [4,6,8,7,3,9]
print(rand_select(alist, 0, len(alist)-1, 1))

